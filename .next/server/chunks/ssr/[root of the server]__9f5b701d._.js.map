{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///Users/jiang/xfuture_r/src/components/mobile/NewsContent.tsx"],"sourcesContent":["\"use client\";\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport axios from 'axios'\nimport dayjs from 'dayjs'\n\n// 定义新闻项的类型\ninterface NewsItem {\n  time: string;      // 发布的时间\n  summary: string;   // 新闻的摘要（标题）\n  details: string;   // 新闻的详细内容（内容）\n}\n\ninterface Translations {\n    [key: string]: any // 根据你的翻译文件结构调整类型\n  }\n\nexport default function ServicePage({\n    lang,\n    translations: t,\n}: {\n    lang:string,\n    translations: Translations\n}) {\n  const [isClient, setIsClient] = useState(false); // 用于检测是否在客户端渲染\n\n  const [activeSection, setActiveSection] = useState(\"a\"); // 当前活动的部分\n  const [currentPage, setCurrentPage] = useState(1); // 当前页码\n  const [newsData1, setNewsData1] = useState<NewsItem[]>([]); // 明确指定 newsData1 的类型为 NewsItem[]\n  const [newsData2, setNewsData2] = useState<NewsItem[]>([]); // 明确指定 newsData2 的类型为 NewsItem[]\n  const router = useRouter(); // 使用 useRouter 导航   // 确保只在客户端运行相关代码\n  \n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  // 格式化日期为 YY-MM-DD\n  const formatDate = (date: string) => dayjs(date).format('YYYY/MM/DD');\n\n  // 获取新闻数据\n  const fetchNewsData = async () => {\n    try {\n      const response = await axios.get('/api/news'); // 调用后端接口\n      const data = response.data.data; // 假设接口返回的数据结构是 { data: [...] }\n      console.log(\"Received data:\", data);  // 打印返回的原始数据\n\n      // 格式化数据并根据 category 分配到 newsData1 或 newsData2\n      const formattedData1: NewsItem[] = [];\n      const formattedData2: NewsItem[] = [];\n\n      data.forEach((item: { \n        publishDate: string; \n        title: string; \n        content: string; \n        category: string; \n        title_cn: string; \n        content_cn: string; \n        title_en: string; \n        content_en: string;\n      }) => {\n        const newsItem: NewsItem = {\n          time: formatDate(item.publishDate), // 格式化时间\n          summary: t.language === 'en' ? item.title_en : (t.language === 'zh' ? item.title_cn : item.title), // 根据语言显示对应标题\n          details: t.language === 'en' ? item.content_en : (t.language === 'zh' ? item.content_cn : item.content), // 根据语言显示对应内容\n        };\n\n        // 根据 category 分配新闻到不同的数组\n        if (item.category === \"a\") {\n          formattedData1.push(newsItem);\n        } else if (item.category === \"b\") {\n          formattedData2.push(newsItem);\n        }\n      });\n\n      setNewsData1(formattedData1);  // 将 category 为 \"1\" 的新闻赋值给 newsData1\n      setNewsData2(formattedData2);  // 将 category 为 \"2\" 的新闻赋值给 newsData2\n      console.log(\"Formatted newsData1:\", formattedData1);\n      console.log(\"Formatted newsData2:\", formattedData2);\n    } catch (error) {\n      console.error('Failed to fetch news data:', error);\n    }\n  };\n\n  // 在组件加载时请求新闻数据，并监听语言变化\n  useEffect(() => {\n    fetchNewsData();\n  }, [t.language]); // 监听语言变化\n\n  // 事件处理函数示例\n  // 修改导航逻辑\n  const handleNavigation = (newsIndex: number) => {\n    router.push(`/mobile/route/news/details?section=${activeSection}&index=${newsIndex}&category=${activeSection}`);\n  };\n\n  const newsPerPage = 10;\n  const currentData = activeSection === \"a\" ? newsData1 : newsData2;\n  const indexOfLastNews = currentPage * newsPerPage;\n  const indexOfFirstNews = indexOfLastNews - newsPerPage;\n  const currentNews = currentData.slice(indexOfFirstNews, indexOfLastNews);\n\n  // 下一页\n  const nextPage = () => {\n    if (currentPage * newsPerPage < currentData.length) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  // 上一页\n  const prevPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  // 计算分页按钮\n  const totalPages = Math.ceil(currentData.length / newsPerPage);\n\n  const getPaginationButtons = () => {\n    const buttons = [];\n\n    // 如果总页数少于等于5页，显示所有页码\n    if (totalPages <= 7) {\n      for (let i = 1; i <= totalPages; i++) {\n        buttons.push(i);\n      }\n    } else {\n      if (currentPage < 5) {\n        buttons.push(1);\n        buttons.push(2);\n        buttons.push(3);\n        buttons.push(4);\n        buttons.push(5);\n        buttons.push('...');\n        buttons.push(totalPages);\n      } else if (currentPage > totalPages - 5) {\n        buttons.push(1);\n        buttons.push('...');\n        buttons.push(totalPages - 4);\n        buttons.push(totalPages - 3);\n        buttons.push(totalPages - 2);\n        buttons.push(totalPages - 1);\n        buttons.push(totalPages);\n      } else {\n        buttons.push(1);\n        buttons.push('...');\n        buttons.push(currentPage - 1);\n        buttons.push(currentPage);\n        buttons.push(currentPage + 1);\n        buttons.push('...');\n        buttons.push(totalPages);\n      }\n    }\n\n    return buttons;\n  };\n\n  return (\n    <div>\n      <div className=\"route-select\">\n        <div className=\"route-f1\"> {t.news.title}</div>\n        <div className=\"route-line\">\n          <span className=\"route-f2\">{t.news.home}</span>\n          <img src=\"/images/Polygon2.png\" alt=\"Contact\"/>\n          <span className=\"route-f3\">{t.news.title2}</span>\n        </div>\n      </div>\n\n      <div className='nnews-line'>\n        <div className=\"nrequirements-button\">\n          <button \n            className={`${activeSection === \"a\" ? \"active\" : \"\"}`} \n            onClick={() => {\n              setActiveSection(\"a\");\n              setCurrentPage(1); // 点击按钮时重置为第一页\n            }}\n          >\n            {t.news.option1}\n          </button>\n          <button \n            className={`${activeSection === \"b\" ? \"active\" : \"\"}`} \n            onClick={() => {\n              setActiveSection(\"b\");\n              setCurrentPage(1); // 点击按钮时重置为第一页\n            }}\n          >\n            {t.news.option2}\n          </button>\n        </div>\n\n        {/* 新闻列表 */}\n        <div className=\"nnews-list\">\n          {currentNews.length > 0 ? (\n            currentNews.map((news, index) => (\n              <div key={index} className=\"mnews-item\" onClick={() => handleNavigation(index)}>\n                <div className='nnews-fl'> \n                <div className=\"nnews-time\">{news.time}</div>\n                <div className='nnews-t'> {activeSection === \"a\" ? t.news.option1 : t.news.option2}</div>\n                </div>\n               <div className=\"nnews-summary\">{news.summary}</div>\n              </div>\n            ))\n          ) : (\n            <div className=\"no-news\">\n              {t.news.noContent} {/* 在语言包中添加一个翻译条目 */}\n            </div>\n          )}\n        </div>\n\n        {/* 分页 */}\n        <div className=\"pagination\">\n          <button \n            className=\"arrow\" \n            onClick={prevPage} \n            disabled={currentPage === 1}\n          >\n            ←\n          </button>\n\n          {getPaginationButtons().map((button, index) => (\n            <button\n              key={index}\n              className={`page-num ${button === currentPage ? \"active\" : \"\"}`}\n              onClick={() => {\n                if (typeof button === 'number') setCurrentPage(button); // 只设置数字页码\n              }}\n              disabled={button === '...'} // 禁用省略符号\n            >\n              {button}\n            </button>\n          ))}\n\n          <button \n            className=\"arrow\" \n            onClick={nextPage} \n            disabled={currentPage * newsPerPage >= currentData.length}\n          >\n            →\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AAJA;;;;;;AAiBe,SAAS,YAAY,EAChC,IAAI,EACJ,cAAc,CAAC,EAIlB;IACC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,eAAe;IAEhE,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,UAAU;IACnE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,OAAO;IAC1D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAc,EAAE,GAAG,iCAAiC;IAC7F,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAc,EAAE,GAAG,iCAAiC;IAC7F,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD,KAAK,qCAAqC;IAEjE,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,YAAY;IACd,GAAG,EAAE;IAEL,kBAAkB;IAClB,MAAM,aAAa,CAAC,OAAiB,CAAA,GAAA,qIAAA,CAAA,UAAK,AAAD,EAAE,MAAM,MAAM,CAAC;IAExD,SAAS;IACT,MAAM,gBAAgB;QACpB,IAAI;YACF,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,cAAc,SAAS;YACxD,MAAM,OAAO,SAAS,IAAI,CAAC,IAAI,EAAE,+BAA+B;YAChE,QAAQ,GAAG,CAAC,kBAAkB,OAAQ,YAAY;YAElD,8CAA8C;YAC9C,MAAM,iBAA6B,EAAE;YACrC,MAAM,iBAA6B,EAAE;YAErC,KAAK,OAAO,CAAC,CAAC;gBAUZ,MAAM,WAAqB;oBACzB,MAAM,WAAW,KAAK,WAAW;oBACjC,SAAS,EAAE,QAAQ,KAAK,OAAO,KAAK,QAAQ,GAAI,EAAE,QAAQ,KAAK,OAAO,KAAK,QAAQ,GAAG,KAAK,KAAK;oBAChG,SAAS,EAAE,QAAQ,KAAK,OAAO,KAAK,UAAU,GAAI,EAAE,QAAQ,KAAK,OAAO,KAAK,UAAU,GAAG,KAAK,OAAO;gBACxG;gBAEA,yBAAyB;gBACzB,IAAI,KAAK,QAAQ,KAAK,KAAK;oBACzB,eAAe,IAAI,CAAC;gBACtB,OAAO,IAAI,KAAK,QAAQ,KAAK,KAAK;oBAChC,eAAe,IAAI,CAAC;gBACtB;YACF;YAEA,aAAa,iBAAkB,oCAAoC;YACnE,aAAa,iBAAkB,oCAAoC;YACnE,QAAQ,GAAG,CAAC,wBAAwB;YACpC,QAAQ,GAAG,CAAC,wBAAwB;QACtC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;QAC9C;IACF;IAEA,uBAAuB;IACvB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG;QAAC,EAAE,QAAQ;KAAC,GAAG,SAAS;IAE3B,WAAW;IACX,SAAS;IACT,MAAM,mBAAmB,CAAC;QACxB,OAAO,IAAI,CAAC,CAAC,mCAAmC,EAAE,cAAc,OAAO,EAAE,UAAU,UAAU,EAAE,eAAe;IAChH;IAEA,MAAM,cAAc;IACpB,MAAM,cAAc,kBAAkB,MAAM,YAAY;IACxD,MAAM,kBAAkB,cAAc;IACtC,MAAM,mBAAmB,kBAAkB;IAC3C,MAAM,cAAc,YAAY,KAAK,CAAC,kBAAkB;IAExD,MAAM;IACN,MAAM,WAAW;QACf,IAAI,cAAc,cAAc,YAAY,MAAM,EAAE;YAClD,eAAe,cAAc;QAC/B;IACF;IAEA,MAAM;IACN,MAAM,WAAW;QACf,IAAI,cAAc,GAAG;YACnB,eAAe,cAAc;QAC/B;IACF;IAEA,SAAS;IACT,MAAM,aAAa,KAAK,IAAI,CAAC,YAAY,MAAM,GAAG;IAElD,MAAM,uBAAuB;QAC3B,MAAM,UAAU,EAAE;QAElB,qBAAqB;QACrB,IAAI,cAAc,GAAG;YACnB,IAAK,IAAI,IAAI,GAAG,KAAK,YAAY,IAAK;gBACpC,QAAQ,IAAI,CAAC;YACf;QACF,OAAO;YACL,IAAI,cAAc,GAAG;gBACnB,QAAQ,IAAI,CAAC;gBACb,QAAQ,IAAI,CAAC;gBACb,QAAQ,IAAI,CAAC;gBACb,QAAQ,IAAI,CAAC;gBACb,QAAQ,IAAI,CAAC;gBACb,QAAQ,IAAI,CAAC;gBACb,QAAQ,IAAI,CAAC;YACf,OAAO,IAAI,cAAc,aAAa,GAAG;gBACvC,QAAQ,IAAI,CAAC;gBACb,QAAQ,IAAI,CAAC;gBACb,QAAQ,IAAI,CAAC,aAAa;gBAC1B,QAAQ,IAAI,CAAC,aAAa;gBAC1B,QAAQ,IAAI,CAAC,aAAa;gBAC1B,QAAQ,IAAI,CAAC,aAAa;gBAC1B,QAAQ,IAAI,CAAC;YACf,OAAO;gBACL,QAAQ,IAAI,CAAC;gBACb,QAAQ,IAAI,CAAC;gBACb,QAAQ,IAAI,CAAC,cAAc;gBAC3B,QAAQ,IAAI,CAAC;gBACb,QAAQ,IAAI,CAAC,cAAc;gBAC3B,QAAQ,IAAI,CAAC;gBACb,QAAQ,IAAI,CAAC;YACf;QACF;QAEA,OAAO;IACT;IAEA,qBACE,8OAAC;;0BACC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;4BAAW;4BAAE,EAAE,IAAI,CAAC,KAAK;;;;;;;kCACxC,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAK,WAAU;0CAAY,EAAE,IAAI,CAAC,IAAI;;;;;;0CACvC,8OAAC;gCAAI,KAAI;gCAAuB,KAAI;;;;;;0CACpC,8OAAC;gCAAK,WAAU;0CAAY,EAAE,IAAI,CAAC,MAAM;;;;;;;;;;;;;;;;;;0BAI7C,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCACC,WAAW,GAAG,kBAAkB,MAAM,WAAW,IAAI;gCACrD,SAAS;oCACP,iBAAiB;oCACjB,eAAe,IAAI,cAAc;gCACnC;0CAEC,EAAE,IAAI,CAAC,OAAO;;;;;;0CAEjB,8OAAC;gCACC,WAAW,GAAG,kBAAkB,MAAM,WAAW,IAAI;gCACrD,SAAS;oCACP,iBAAiB;oCACjB,eAAe,IAAI,cAAc;gCACnC;0CAEC,EAAE,IAAI,CAAC,OAAO;;;;;;;;;;;;kCAKnB,8OAAC;wBAAI,WAAU;kCACZ,YAAY,MAAM,GAAG,IACpB,YAAY,GAAG,CAAC,CAAC,MAAM,sBACrB,8OAAC;gCAAgB,WAAU;gCAAa,SAAS,IAAM,iBAAiB;;kDACtE,8OAAC;wCAAI,WAAU;;0DACf,8OAAC;gDAAI,WAAU;0DAAc,KAAK,IAAI;;;;;;0DACtC,8OAAC;gDAAI,WAAU;;oDAAU;oDAAE,kBAAkB,MAAM,EAAE,IAAI,CAAC,OAAO,GAAG,EAAE,IAAI,CAAC,OAAO;;;;;;;;;;;;;kDAEnF,8OAAC;wCAAI,WAAU;kDAAiB,KAAK,OAAO;;;;;;;+BALnC;;;;sDASZ,8OAAC;4BAAI,WAAU;;gCACZ,EAAE,IAAI,CAAC,SAAS;gCAAC;;;;;;;;;;;;kCAMxB,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCACC,WAAU;gCACV,SAAS;gCACT,UAAU,gBAAgB;0CAC3B;;;;;;4BAIA,uBAAuB,GAAG,CAAC,CAAC,QAAQ,sBACnC,8OAAC;oCAEC,WAAW,CAAC,SAAS,EAAE,WAAW,cAAc,WAAW,IAAI;oCAC/D,SAAS;wCACP,IAAI,OAAO,WAAW,UAAU,eAAe,SAAS,UAAU;oCACpE;oCACA,UAAU,WAAW;8CAEpB;mCAPI;;;;;0CAWT,8OAAC;gCACC,WAAU;gCACV,SAAS;gCACT,UAAU,cAAc,eAAe,YAAY,MAAM;0CAC1D;;;;;;;;;;;;;;;;;;;;;;;;AAOX","debugId":null}},
    {"offset": {"line": 441, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}