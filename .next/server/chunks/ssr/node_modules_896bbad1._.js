module.exports = {

"[project]/node_modules/quickselect/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
/**
 * Rearranges items so that all items in the [left, k] are the smallest.
 * The k-th element will have the (k - left + 1)-th smallest value in [left, right].
 *
 * @template T
 * @param {T[]} arr the array to partially sort (in place)
 * @param {number} k middle index for partial sorting (as defined above)
 * @param {number} [left=0] left index of the range to sort
 * @param {number} [right=arr.length-1] right index
 * @param {(a: T, b: T) => number} [compare = (a, b) => a - b] compare function
 */ __turbopack_context__.s({
    "default": (()=>quickselect)
});
function quickselect(arr, k, left = 0, right = arr.length - 1, compare = defaultCompare) {
    while(right > left){
        if (right - left > 600) {
            const n = right - left + 1;
            const m = k - left + 1;
            const z = Math.log(n);
            const s = 0.5 * Math.exp(2 * z / 3);
            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
            quickselect(arr, k, newLeft, newRight, compare);
        }
        const t = arr[k];
        let i = left;
        /** @type {number} */ let j = right;
        swap(arr, left, k);
        if (compare(arr[right], t) > 0) swap(arr, left, right);
        while(i < j){
            swap(arr, i, j);
            i++;
            j--;
            while(compare(arr[i], t) < 0)i++;
            while(compare(arr[j], t) > 0)j--;
        }
        if (compare(arr[left], t) === 0) swap(arr, left, j);
        else {
            j++;
            swap(arr, j, right);
        }
        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
    }
}
/**
 * @template T
 * @param {T[]} arr
 * @param {number} i
 * @param {number} j
 */ function swap(arr, i, j) {
    const tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}
/**
 * @template T
 * @param {T} a
 * @param {T} b
 * @returns {number}
 */ function defaultCompare(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}
}}),
"[project]/node_modules/rbush/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>RBush)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quickselect$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/quickselect/index.js [app-ssr] (ecmascript)");
;
class RBush {
    constructor(maxEntries = 9){
        // max entries in a node is 9 by default; min node fill is 40% for best performance
        this._maxEntries = Math.max(4, maxEntries);
        this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));
        this.clear();
    }
    all() {
        return this._all(this.data, []);
    }
    search(bbox) {
        let node = this.data;
        const result = [];
        if (!intersects(bbox, node)) return result;
        const toBBox = this.toBBox;
        const nodesToSearch = [];
        while(node){
            for(let i = 0; i < node.children.length; i++){
                const child = node.children[i];
                const childBBox = node.leaf ? toBBox(child) : child;
                if (intersects(bbox, childBBox)) {
                    if (node.leaf) result.push(child);
                    else if (contains(bbox, childBBox)) this._all(child, result);
                    else nodesToSearch.push(child);
                }
            }
            node = nodesToSearch.pop();
        }
        return result;
    }
    collides(bbox) {
        let node = this.data;
        if (!intersects(bbox, node)) return false;
        const nodesToSearch = [];
        while(node){
            for(let i = 0; i < node.children.length; i++){
                const child = node.children[i];
                const childBBox = node.leaf ? this.toBBox(child) : child;
                if (intersects(bbox, childBBox)) {
                    if (node.leaf || contains(bbox, childBBox)) return true;
                    nodesToSearch.push(child);
                }
            }
            node = nodesToSearch.pop();
        }
        return false;
    }
    load(data) {
        if (!(data && data.length)) return this;
        if (data.length < this._minEntries) {
            for(let i = 0; i < data.length; i++){
                this.insert(data[i]);
            }
            return this;
        }
        // recursively build the tree with the given data from scratch using OMT algorithm
        let node = this._build(data.slice(), 0, data.length - 1, 0);
        if (!this.data.children.length) {
            // save as is if tree is empty
            this.data = node;
        } else if (this.data.height === node.height) {
            // split root if trees have the same height
            this._splitRoot(this.data, node);
        } else {
            if (this.data.height < node.height) {
                // swap trees if inserted one is bigger
                const tmpNode = this.data;
                this.data = node;
                node = tmpNode;
            }
            // insert the small tree into the large tree at appropriate level
            this._insert(node, this.data.height - node.height - 1, true);
        }
        return this;
    }
    insert(item) {
        if (item) this._insert(item, this.data.height - 1);
        return this;
    }
    clear() {
        this.data = createNode([]);
        return this;
    }
    remove(item, equalsFn) {
        if (!item) return this;
        let node = this.data;
        const bbox = this.toBBox(item);
        const path = [];
        const indexes = [];
        let i, parent, goingUp;
        // depth-first iterative tree traversal
        while(node || path.length){
            if (!node) {
                node = path.pop();
                parent = path[path.length - 1];
                i = indexes.pop();
                goingUp = true;
            }
            if (node.leaf) {
                const index = findItem(item, node.children, equalsFn);
                if (index !== -1) {
                    // item found, remove the item and condense tree upwards
                    node.children.splice(index, 1);
                    path.push(node);
                    this._condense(path);
                    return this;
                }
            }
            if (!goingUp && !node.leaf && contains(node, bbox)) {
                path.push(node);
                indexes.push(i);
                i = 0;
                parent = node;
                node = node.children[0];
            } else if (parent) {
                i++;
                node = parent.children[i];
                goingUp = false;
            } else node = null; // nothing found
        }
        return this;
    }
    toBBox(item) {
        return item;
    }
    compareMinX(a, b) {
        return a.minX - b.minX;
    }
    compareMinY(a, b) {
        return a.minY - b.minY;
    }
    toJSON() {
        return this.data;
    }
    fromJSON(data) {
        this.data = data;
        return this;
    }
    _all(node, result) {
        const nodesToSearch = [];
        while(node){
            if (node.leaf) result.push(...node.children);
            else nodesToSearch.push(...node.children);
            node = nodesToSearch.pop();
        }
        return result;
    }
    _build(items, left, right, height) {
        const N = right - left + 1;
        let M = this._maxEntries;
        let node;
        if (N <= M) {
            // reached leaf level; return leaf
            node = createNode(items.slice(left, right + 1));
            calcBBox(node, this.toBBox);
            return node;
        }
        if (!height) {
            // target height of the bulk-loaded tree
            height = Math.ceil(Math.log(N) / Math.log(M));
            // target number of root entries to maximize storage utilization
            M = Math.ceil(N / Math.pow(M, height - 1));
        }
        node = createNode([]);
        node.leaf = false;
        node.height = height;
        // split the items into M mostly square tiles
        const N2 = Math.ceil(N / M);
        const N1 = N2 * Math.ceil(Math.sqrt(M));
        multiSelect(items, left, right, N1, this.compareMinX);
        for(let i = left; i <= right; i += N1){
            const right2 = Math.min(i + N1 - 1, right);
            multiSelect(items, i, right2, N2, this.compareMinY);
            for(let j = i; j <= right2; j += N2){
                const right3 = Math.min(j + N2 - 1, right2);
                // pack each entry recursively
                node.children.push(this._build(items, j, right3, height - 1));
            }
        }
        calcBBox(node, this.toBBox);
        return node;
    }
    _chooseSubtree(bbox, node, level, path) {
        while(true){
            path.push(node);
            if (node.leaf || path.length - 1 === level) break;
            let minArea = Infinity;
            let minEnlargement = Infinity;
            let targetNode;
            for(let i = 0; i < node.children.length; i++){
                const child = node.children[i];
                const area = bboxArea(child);
                const enlargement = enlargedArea(bbox, child) - area;
                // choose entry with the least area enlargement
                if (enlargement < minEnlargement) {
                    minEnlargement = enlargement;
                    minArea = area < minArea ? area : minArea;
                    targetNode = child;
                } else if (enlargement === minEnlargement) {
                    // otherwise choose one with the smallest area
                    if (area < minArea) {
                        minArea = area;
                        targetNode = child;
                    }
                }
            }
            node = targetNode || node.children[0];
        }
        return node;
    }
    _insert(item, level, isNode) {
        const bbox = isNode ? item : this.toBBox(item);
        const insertPath = [];
        // find the best node for accommodating the item, saving all nodes along the path too
        const node = this._chooseSubtree(bbox, this.data, level, insertPath);
        // put the item into the node
        node.children.push(item);
        extend(node, bbox);
        // split on node overflow; propagate upwards if necessary
        while(level >= 0){
            if (insertPath[level].children.length > this._maxEntries) {
                this._split(insertPath, level);
                level--;
            } else break;
        }
        // adjust bboxes along the insertion path
        this._adjustParentBBoxes(bbox, insertPath, level);
    }
    // split overflowed node into two
    _split(insertPath, level) {
        const node = insertPath[level];
        const M = node.children.length;
        const m = this._minEntries;
        this._chooseSplitAxis(node, m, M);
        const splitIndex = this._chooseSplitIndex(node, m, M);
        const newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
        newNode.height = node.height;
        newNode.leaf = node.leaf;
        calcBBox(node, this.toBBox);
        calcBBox(newNode, this.toBBox);
        if (level) insertPath[level - 1].children.push(newNode);
        else this._splitRoot(node, newNode);
    }
    _splitRoot(node, newNode) {
        // split root node
        this.data = createNode([
            node,
            newNode
        ]);
        this.data.height = node.height + 1;
        this.data.leaf = false;
        calcBBox(this.data, this.toBBox);
    }
    _chooseSplitIndex(node, m, M) {
        let index;
        let minOverlap = Infinity;
        let minArea = Infinity;
        for(let i = m; i <= M - m; i++){
            const bbox1 = distBBox(node, 0, i, this.toBBox);
            const bbox2 = distBBox(node, i, M, this.toBBox);
            const overlap = intersectionArea(bbox1, bbox2);
            const area = bboxArea(bbox1) + bboxArea(bbox2);
            // choose distribution with minimum overlap
            if (overlap < minOverlap) {
                minOverlap = overlap;
                index = i;
                minArea = area < minArea ? area : minArea;
            } else if (overlap === minOverlap) {
                // otherwise choose distribution with minimum area
                if (area < minArea) {
                    minArea = area;
                    index = i;
                }
            }
        }
        return index || M - m;
    }
    // sorts node children by the best axis for split
    _chooseSplitAxis(node, m, M) {
        const compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;
        const compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;
        const xMargin = this._allDistMargin(node, m, M, compareMinX);
        const yMargin = this._allDistMargin(node, m, M, compareMinY);
        // if total distributions margin value is minimal for x, sort by minX,
        // otherwise it's already sorted by minY
        if (xMargin < yMargin) node.children.sort(compareMinX);
    }
    // total margin of all possible split distributions where each node is at least m full
    _allDistMargin(node, m, M, compare) {
        node.children.sort(compare);
        const toBBox = this.toBBox;
        const leftBBox = distBBox(node, 0, m, toBBox);
        const rightBBox = distBBox(node, M - m, M, toBBox);
        let margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);
        for(let i = m; i < M - m; i++){
            const child = node.children[i];
            extend(leftBBox, node.leaf ? toBBox(child) : child);
            margin += bboxMargin(leftBBox);
        }
        for(let i = M - m - 1; i >= m; i--){
            const child = node.children[i];
            extend(rightBBox, node.leaf ? toBBox(child) : child);
            margin += bboxMargin(rightBBox);
        }
        return margin;
    }
    _adjustParentBBoxes(bbox, path, level) {
        // adjust bboxes along the given tree path
        for(let i = level; i >= 0; i--){
            extend(path[i], bbox);
        }
    }
    _condense(path) {
        // go through the path, removing empty nodes and updating bboxes
        for(let i = path.length - 1, siblings; i >= 0; i--){
            if (path[i].children.length === 0) {
                if (i > 0) {
                    siblings = path[i - 1].children;
                    siblings.splice(siblings.indexOf(path[i]), 1);
                } else this.clear();
            } else calcBBox(path[i], this.toBBox);
        }
    }
}
function findItem(item, items, equalsFn) {
    if (!equalsFn) return items.indexOf(item);
    for(let i = 0; i < items.length; i++){
        if (equalsFn(item, items[i])) return i;
    }
    return -1;
}
// calculate node's bbox from bboxes of its children
function calcBBox(node, toBBox) {
    distBBox(node, 0, node.children.length, toBBox, node);
}
// min bounding rectangle of node children from k to p-1
function distBBox(node, k, p, toBBox, destNode) {
    if (!destNode) destNode = createNode(null);
    destNode.minX = Infinity;
    destNode.minY = Infinity;
    destNode.maxX = -Infinity;
    destNode.maxY = -Infinity;
    for(let i = k; i < p; i++){
        const child = node.children[i];
        extend(destNode, node.leaf ? toBBox(child) : child);
    }
    return destNode;
}
function extend(a, b) {
    a.minX = Math.min(a.minX, b.minX);
    a.minY = Math.min(a.minY, b.minY);
    a.maxX = Math.max(a.maxX, b.maxX);
    a.maxY = Math.max(a.maxY, b.maxY);
    return a;
}
function compareNodeMinX(a, b) {
    return a.minX - b.minX;
}
function compareNodeMinY(a, b) {
    return a.minY - b.minY;
}
function bboxArea(a) {
    return (a.maxX - a.minX) * (a.maxY - a.minY);
}
function bboxMargin(a) {
    return a.maxX - a.minX + (a.maxY - a.minY);
}
function enlargedArea(a, b) {
    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) * (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
}
function intersectionArea(a, b) {
    const minX = Math.max(a.minX, b.minX);
    const minY = Math.max(a.minY, b.minY);
    const maxX = Math.min(a.maxX, b.maxX);
    const maxY = Math.min(a.maxY, b.maxY);
    return Math.max(0, maxX - minX) * Math.max(0, maxY - minY);
}
function contains(a, b) {
    return a.minX <= b.minX && a.minY <= b.minY && b.maxX <= a.maxX && b.maxY <= a.maxY;
}
function intersects(a, b) {
    return b.minX <= a.maxX && b.minY <= a.maxY && b.maxX >= a.minX && b.maxY >= a.minY;
}
function createNode(children) {
    return {
        children,
        height: 1,
        leaf: true,
        minX: Infinity,
        minY: Infinity,
        maxX: -Infinity,
        maxY: -Infinity
    };
}
// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
// combines selection algorithm with binary divide & conquer approach
function multiSelect(arr, left, right, n, compare) {
    const stack = [
        left,
        right
    ];
    while(stack.length){
        right = stack.pop();
        left = stack.pop();
        if (right - left <= n) continue;
        const mid = left + Math.ceil((right - left) / n / 2) * n;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quickselect$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(arr, mid, left, right, compare);
        stack.push(left, mid, mid, right);
    }
}
}}),
"[project]/node_modules/color-parse/node_modules/color-name/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = {
    aliceblue: [
        240,
        248,
        255
    ],
    antiquewhite: [
        250,
        235,
        215
    ],
    aqua: [
        0,
        255,
        255
    ],
    aquamarine: [
        127,
        255,
        212
    ],
    azure: [
        240,
        255,
        255
    ],
    beige: [
        245,
        245,
        220
    ],
    bisque: [
        255,
        228,
        196
    ],
    black: [
        0,
        0,
        0
    ],
    blanchedalmond: [
        255,
        235,
        205
    ],
    blue: [
        0,
        0,
        255
    ],
    blueviolet: [
        138,
        43,
        226
    ],
    brown: [
        165,
        42,
        42
    ],
    burlywood: [
        222,
        184,
        135
    ],
    cadetblue: [
        95,
        158,
        160
    ],
    chartreuse: [
        127,
        255,
        0
    ],
    chocolate: [
        210,
        105,
        30
    ],
    coral: [
        255,
        127,
        80
    ],
    cornflowerblue: [
        100,
        149,
        237
    ],
    cornsilk: [
        255,
        248,
        220
    ],
    crimson: [
        220,
        20,
        60
    ],
    cyan: [
        0,
        255,
        255
    ],
    darkblue: [
        0,
        0,
        139
    ],
    darkcyan: [
        0,
        139,
        139
    ],
    darkgoldenrod: [
        184,
        134,
        11
    ],
    darkgray: [
        169,
        169,
        169
    ],
    darkgreen: [
        0,
        100,
        0
    ],
    darkgrey: [
        169,
        169,
        169
    ],
    darkkhaki: [
        189,
        183,
        107
    ],
    darkmagenta: [
        139,
        0,
        139
    ],
    darkolivegreen: [
        85,
        107,
        47
    ],
    darkorange: [
        255,
        140,
        0
    ],
    darkorchid: [
        153,
        50,
        204
    ],
    darkred: [
        139,
        0,
        0
    ],
    darksalmon: [
        233,
        150,
        122
    ],
    darkseagreen: [
        143,
        188,
        143
    ],
    darkslateblue: [
        72,
        61,
        139
    ],
    darkslategray: [
        47,
        79,
        79
    ],
    darkslategrey: [
        47,
        79,
        79
    ],
    darkturquoise: [
        0,
        206,
        209
    ],
    darkviolet: [
        148,
        0,
        211
    ],
    deeppink: [
        255,
        20,
        147
    ],
    deepskyblue: [
        0,
        191,
        255
    ],
    dimgray: [
        105,
        105,
        105
    ],
    dimgrey: [
        105,
        105,
        105
    ],
    dodgerblue: [
        30,
        144,
        255
    ],
    firebrick: [
        178,
        34,
        34
    ],
    floralwhite: [
        255,
        250,
        240
    ],
    forestgreen: [
        34,
        139,
        34
    ],
    fuchsia: [
        255,
        0,
        255
    ],
    gainsboro: [
        220,
        220,
        220
    ],
    ghostwhite: [
        248,
        248,
        255
    ],
    gold: [
        255,
        215,
        0
    ],
    goldenrod: [
        218,
        165,
        32
    ],
    gray: [
        128,
        128,
        128
    ],
    green: [
        0,
        128,
        0
    ],
    greenyellow: [
        173,
        255,
        47
    ],
    grey: [
        128,
        128,
        128
    ],
    honeydew: [
        240,
        255,
        240
    ],
    hotpink: [
        255,
        105,
        180
    ],
    indianred: [
        205,
        92,
        92
    ],
    indigo: [
        75,
        0,
        130
    ],
    ivory: [
        255,
        255,
        240
    ],
    khaki: [
        240,
        230,
        140
    ],
    lavender: [
        230,
        230,
        250
    ],
    lavenderblush: [
        255,
        240,
        245
    ],
    lawngreen: [
        124,
        252,
        0
    ],
    lemonchiffon: [
        255,
        250,
        205
    ],
    lightblue: [
        173,
        216,
        230
    ],
    lightcoral: [
        240,
        128,
        128
    ],
    lightcyan: [
        224,
        255,
        255
    ],
    lightgoldenrodyellow: [
        250,
        250,
        210
    ],
    lightgray: [
        211,
        211,
        211
    ],
    lightgreen: [
        144,
        238,
        144
    ],
    lightgrey: [
        211,
        211,
        211
    ],
    lightpink: [
        255,
        182,
        193
    ],
    lightsalmon: [
        255,
        160,
        122
    ],
    lightseagreen: [
        32,
        178,
        170
    ],
    lightskyblue: [
        135,
        206,
        250
    ],
    lightslategray: [
        119,
        136,
        153
    ],
    lightslategrey: [
        119,
        136,
        153
    ],
    lightsteelblue: [
        176,
        196,
        222
    ],
    lightyellow: [
        255,
        255,
        224
    ],
    lime: [
        0,
        255,
        0
    ],
    limegreen: [
        50,
        205,
        50
    ],
    linen: [
        250,
        240,
        230
    ],
    magenta: [
        255,
        0,
        255
    ],
    maroon: [
        128,
        0,
        0
    ],
    mediumaquamarine: [
        102,
        205,
        170
    ],
    mediumblue: [
        0,
        0,
        205
    ],
    mediumorchid: [
        186,
        85,
        211
    ],
    mediumpurple: [
        147,
        112,
        219
    ],
    mediumseagreen: [
        60,
        179,
        113
    ],
    mediumslateblue: [
        123,
        104,
        238
    ],
    mediumspringgreen: [
        0,
        250,
        154
    ],
    mediumturquoise: [
        72,
        209,
        204
    ],
    mediumvioletred: [
        199,
        21,
        133
    ],
    midnightblue: [
        25,
        25,
        112
    ],
    mintcream: [
        245,
        255,
        250
    ],
    mistyrose: [
        255,
        228,
        225
    ],
    moccasin: [
        255,
        228,
        181
    ],
    navajowhite: [
        255,
        222,
        173
    ],
    navy: [
        0,
        0,
        128
    ],
    oldlace: [
        253,
        245,
        230
    ],
    olive: [
        128,
        128,
        0
    ],
    olivedrab: [
        107,
        142,
        35
    ],
    orange: [
        255,
        165,
        0
    ],
    orangered: [
        255,
        69,
        0
    ],
    orchid: [
        218,
        112,
        214
    ],
    palegoldenrod: [
        238,
        232,
        170
    ],
    palegreen: [
        152,
        251,
        152
    ],
    paleturquoise: [
        175,
        238,
        238
    ],
    palevioletred: [
        219,
        112,
        147
    ],
    papayawhip: [
        255,
        239,
        213
    ],
    peachpuff: [
        255,
        218,
        185
    ],
    peru: [
        205,
        133,
        63
    ],
    pink: [
        255,
        192,
        203
    ],
    plum: [
        221,
        160,
        221
    ],
    powderblue: [
        176,
        224,
        230
    ],
    purple: [
        128,
        0,
        128
    ],
    rebeccapurple: [
        102,
        51,
        153
    ],
    red: [
        255,
        0,
        0
    ],
    rosybrown: [
        188,
        143,
        143
    ],
    royalblue: [
        65,
        105,
        225
    ],
    saddlebrown: [
        139,
        69,
        19
    ],
    salmon: [
        250,
        128,
        114
    ],
    sandybrown: [
        244,
        164,
        96
    ],
    seagreen: [
        46,
        139,
        87
    ],
    seashell: [
        255,
        245,
        238
    ],
    sienna: [
        160,
        82,
        45
    ],
    silver: [
        192,
        192,
        192
    ],
    skyblue: [
        135,
        206,
        235
    ],
    slateblue: [
        106,
        90,
        205
    ],
    slategray: [
        112,
        128,
        144
    ],
    slategrey: [
        112,
        128,
        144
    ],
    snow: [
        255,
        250,
        250
    ],
    springgreen: [
        0,
        255,
        127
    ],
    steelblue: [
        70,
        130,
        180
    ],
    tan: [
        210,
        180,
        140
    ],
    teal: [
        0,
        128,
        128
    ],
    thistle: [
        216,
        191,
        216
    ],
    tomato: [
        255,
        99,
        71
    ],
    turquoise: [
        64,
        224,
        208
    ],
    violet: [
        238,
        130,
        238
    ],
    wheat: [
        245,
        222,
        179
    ],
    white: [
        255,
        255,
        255
    ],
    whitesmoke: [
        245,
        245,
        245
    ],
    yellow: [
        255,
        255,
        0
    ],
    yellowgreen: [
        154,
        205,
        50
    ]
};
}}),
"[project]/node_modules/color-parse/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
/**
 * @module color-parse
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$parse$2f$node_modules$2f$color$2d$name$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/color-parse/node_modules/color-name/index.js [app-ssr] (ecmascript)");
;
const __TURBOPACK__default__export__ = parse;
/**
 * Base hues
 * http://dev.w3.org/csswg/css-color/#typedef-named-hue
 */ //FIXME: use external hue detector
var baseHues = {
    red: 0,
    orange: 60,
    yellow: 120,
    green: 180,
    blue: 240,
    purple: 300
};
/**
 * Parse color from the string passed
 *
 * @return {Object} A space indicator `space`, an array `values` and `alpha`
 */ function parse(cstr) {
    var m, parts = [], alpha = 1, space;
    //numeric case
    if (typeof cstr === 'number') {
        return {
            space: 'rgb',
            values: [
                cstr >>> 16,
                (cstr & 0x00ff00) >>> 8,
                cstr & 0x0000ff
            ],
            alpha: 1
        };
    }
    if (typeof cstr === 'number') return {
        space: 'rgb',
        values: [
            cstr >>> 16,
            (cstr & 0x00ff00) >>> 8,
            cstr & 0x0000ff
        ],
        alpha: 1
    };
    cstr = String(cstr).toLowerCase();
    //keyword
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$parse$2f$node_modules$2f$color$2d$name$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"][cstr]) {
        parts = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$parse$2f$node_modules$2f$color$2d$name$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"][cstr].slice();
        space = 'rgb';
    } else if (cstr === 'transparent') {
        alpha = 0;
        space = 'rgb';
        parts = [
            0,
            0,
            0
        ];
    } else if (cstr[0] === '#') {
        var base = cstr.slice(1);
        var size = base.length;
        var isShort = size <= 4;
        alpha = 1;
        if (isShort) {
            parts = [
                parseInt(base[0] + base[0], 16),
                parseInt(base[1] + base[1], 16),
                parseInt(base[2] + base[2], 16)
            ];
            if (size === 4) {
                alpha = parseInt(base[3] + base[3], 16) / 255;
            }
        } else {
            parts = [
                parseInt(base[0] + base[1], 16),
                parseInt(base[2] + base[3], 16),
                parseInt(base[4] + base[5], 16)
            ];
            if (size === 8) {
                alpha = parseInt(base[6] + base[7], 16) / 255;
            }
        }
        if (!parts[0]) parts[0] = 0;
        if (!parts[1]) parts[1] = 0;
        if (!parts[2]) parts[2] = 0;
        space = 'rgb';
    } else if (m = /^((?:rgba?|hs[lvb]a?|hwba?|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms|oklch|oklab|color))\s*\(([^\)]*)\)/.exec(cstr)) {
        var name = m[1];
        space = name.replace(/a$/, '');
        var dims = space === 'cmyk' ? 4 : space === 'gray' ? 1 : 3;
        parts = m[2].trim().split(/\s*[,\/]\s*|\s+/);
        // color(srgb-linear x x x) -> srgb-linear(x x x)
        if (space === 'color') space = parts.shift();
        parts = parts.map(function(x, i) {
            //<percentage>
            if (x[x.length - 1] === '%') {
                x = parseFloat(x) / 100;
                // alpha -> 0..1
                if (i === 3) return x;
                // rgb -> 0..255
                if (space === 'rgb') return x * 255;
                // hsl, hwb H -> 0..100
                if (space[0] === 'h') return x * 100;
                // lch, lab L -> 0..100
                if (space[0] === 'l' && !i) return x * 100;
                // lab A B -> -125..125
                if (space === 'lab') return x * 125;
                // lch C -> 0..150, H -> 0..360
                if (space === 'lch') return i < 2 ? x * 150 : x * 360;
                // oklch/oklab L -> 0..1
                if (space[0] === 'o' && !i) return x;
                // oklab A B -> -0.4..0.4
                if (space === 'oklab') return x * 0.4;
                // oklch C -> 0..0.4, H -> 0..360
                if (space === 'oklch') return i < 2 ? x * 0.4 : x * 360;
                // color(xxx) -> 0..1
                return x;
            }
            //hue
            if (space[i] === 'h' || i === 2 && space[space.length - 1] === 'h') {
                //<base-hue>
                if (baseHues[x] !== undefined) return baseHues[x];
                //<deg>
                if (x.endsWith('deg')) return parseFloat(x);
                //<turn>
                if (x.endsWith('turn')) return parseFloat(x) * 360;
                if (x.endsWith('grad')) return parseFloat(x) * 360 / 400;
                if (x.endsWith('rad')) return parseFloat(x) * 180 / Math.PI;
            }
            if (x === 'none') return 0;
            return parseFloat(x);
        });
        alpha = parts.length > dims ? parts.pop() : 1;
    } else if (/[0-9](?:\s|\/|,)/.test(cstr)) {
        parts = cstr.match(/([0-9]+)/g).map(function(value) {
            return parseFloat(value);
        });
        space = cstr.match(/([a-z])/ig)?.join('')?.toLowerCase() || 'rgb';
    }
    return {
        space,
        values: parts,
        alpha
    };
}
}}),
"[project]/node_modules/color-space/rgb.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
/**
 * RGB space.
 *
 * @module  color-space/rgb
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const rgb = {
    name: 'rgb',
    min: [
        0,
        0,
        0
    ],
    max: [
        255,
        255,
        255
    ],
    channel: [
        'red',
        'green',
        'blue'
    ],
    alias: [
        'RGB'
    ]
};
const __TURBOPACK__default__export__ = rgb;
}}),
"[project]/node_modules/color-space/hsl.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
/**
 * @module color-space/hsl
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$rgb$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/color-space/rgb.js [app-ssr] (ecmascript)");
;
var hsl = {
    name: 'hsl',
    min: [
        0,
        0,
        0
    ],
    max: [
        360,
        100,
        100
    ],
    channel: [
        'hue',
        'saturation',
        'lightness'
    ],
    alias: [
        'HSL'
    ],
    rgb: function(hsl) {
        var h = hsl[0] / 360, s = hsl[1] / 100, l = hsl[2] / 100, t1, t2, t3, rgb, val, i = 0;
        if (s === 0) return val = l * 255, [
            val,
            val,
            val
        ];
        t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
        t1 = 2 * l - t2;
        rgb = [
            0,
            0,
            0
        ];
        for(; i < 3;){
            t3 = h + 1 / 3 * -(i - 1);
            t3 < 0 ? t3++ : t3 > 1 && t3--;
            val = 6 * t3 < 1 ? t1 + (t2 - t1) * 6 * t3 : 2 * t3 < 1 ? t2 : 3 * t3 < 2 ? t1 + (t2 - t1) * (2 / 3 - t3) * 6 : t1;
            rgb[i++] = val * 255;
        }
        return rgb;
    }
};
const __TURBOPACK__default__export__ = hsl;
//extend rgb
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$rgb$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].hsl = function(rgb) {
    var r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), delta = max - min, h, s, l;
    if (max === min) {
        h = 0;
    } else if (r === max) {
        h = (g - b) / delta;
    } else if (g === max) {
        h = 2 + (b - r) / delta;
    } else if (b === max) {
        h = 4 + (r - g) / delta;
    }
    //FIXME h is possibly undefined
    //@ts-ignore
    h = Math.min(h * 60, 360);
    if (h < 0) {
        h += 360;
    }
    l = (min + max) / 2;
    if (max === min) {
        s = 0;
    } else if (l <= 0.5) {
        s = delta / (max + min);
    } else {
        s = delta / (2 - max - min);
    }
    return [
        h,
        s * 100,
        l * 100
    ];
};
}}),
"[project]/node_modules/color-space/xyz.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
/**
 * CIE XYZ
 *
 * @module  color-space/xyz
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$rgb$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/color-space/rgb.js [app-ssr] (ecmascript)");
;
const xyz = {
    name: 'xyz',
    min: [
        0,
        0,
        0
    ],
    channel: [
        'X',
        'Y',
        'Z'
    ],
    alias: [
        'XYZ',
        'ciexyz',
        'cie1931'
    ],
    // Whitepoint reference values with observer/illuminant
    // http://en.wikipedia.org/wiki/Standard_illuminant
    whitepoint: {
        //1931 2°
        2: {
            //incadescent
            A: [
                109.85,
                100,
                35.585
            ],
            // B:[],
            C: [
                98.074,
                100,
                118.232
            ],
            D50: [
                96.422,
                100,
                82.521
            ],
            D55: [
                95.682,
                100,
                92.149
            ],
            //daylight
            D65: [
                95.045592705167,
                100,
                108.9057750759878
            ],
            D75: [
                94.972,
                100,
                122.638
            ],
            //flourescent
            // F1: [],
            F2: [
                99.187,
                100,
                67.395
            ],
            // F3: [],
            // F4: [],
            // F5: [],
            // F6:[],
            F7: [
                95.044,
                100,
                108.755
            ],
            // F8: [],
            // F9: [],
            // F10: [],
            F11: [
                100.966,
                100,
                64.370
            ],
            // F12: [],
            E: [
                100,
                100,
                100
            ]
        },
        //1964  10°
        10: {
            //incadescent
            A: [
                111.144,
                100,
                35.200
            ],
            C: [
                97.285,
                100,
                116.145
            ],
            D50: [
                96.720,
                100,
                81.427
            ],
            D55: [
                95.799,
                100,
                90.926
            ],
            //daylight
            D65: [
                94.811,
                100,
                107.304
            ],
            D75: [
                94.416,
                100,
                120.641
            ],
            //flourescent
            F2: [
                103.280,
                100,
                69.026
            ],
            F7: [
                95.792,
                100,
                107.687
            ],
            F11: [
                103.866,
                100,
                65.627
            ],
            E: [
                100,
                100,
                100
            ]
        }
    }
};
/**
 * Top values are the whitepoint’s top values, default are D65
 */ xyz.max = xyz.whitepoint[2].D65;
/**
 * Transform xyz to rgb
 *
 * @param {Array<number>} _xyz Array of xyz values
 * @param {Array<number>} white Whitepoint reference
 * @return {Array<number>} RGB values
 */ xyz.rgb = function(_xyz, white) {
    // FIXME: make sure we have to divide like this. Probably we have to replace matrix as well then
    white = white || xyz.whitepoint[2].E;
    var x = _xyz[0] / white[0], y = _xyz[1] / white[1], z = _xyz[2] / white[2], r, g, b;
    // assume sRGB
    // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
    r = x * 3.240969941904521 + y * -1.537383177570093 + z * -0.498610760293;
    g = x * -0.96924363628087 + y * 1.87596750150772 + z * 0.041555057407175;
    b = x * 0.055630079696993 + y * -0.20397695888897 + z * 1.056971514242878;
    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r = r * 12.92;
    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g = g * 12.92;
    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b = b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [
        r * 255,
        g * 255,
        b * 255
    ];
};
/**
 * RGB to XYZ
 *
 * @param {Array<number>} rgb RGB channels
 *
 * @return {Array<number>} XYZ channels
 */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$rgb$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].xyz = function(rgb, white) {
    var r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255;
    // assume sRGB
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x = r * 0.41239079926595 + g * 0.35758433938387 + b * 0.18048078840183;
    var y = r * 0.21263900587151 + g * 0.71516867876775 + b * 0.072192315360733;
    var z = r * 0.019330818715591 + g * 0.11919477979462 + b * 0.95053215224966;
    white = white || xyz.whitepoint[2].E;
    return [
        x * white[0],
        y * white[1],
        z * white[2]
    ];
};
const __TURBOPACK__default__export__ = xyz;
}}),
"[project]/node_modules/color-space/luv.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
/**
 * CIE LUV (C'est la vie)
 *
 * @module color-space/luv
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$xyz$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/color-space/xyz.js [app-ssr] (ecmascript)");
;
var luv = {
    name: 'luv',
    //NOTE: luv has no rigidly defined limits
    //easyrgb fails to get proper coords
    //boronine states no rigid limits
    //colorMine refers this ones:
    min: [
        0,
        -134,
        -140
    ],
    max: [
        100,
        224,
        122
    ],
    channel: [
        'lightness',
        'u',
        'v'
    ],
    alias: [
        'LUV',
        'cieluv',
        'cie1976'
    ],
    xyz: function(arg, i, o) {
        var _u, _v, l, u, v, x, y, z, xn, yn, zn, un, vn;
        l = arg[0], u = arg[1], v = arg[2];
        if (l === 0) return [
            0,
            0,
            0
        ];
        //get constants
        //var e = 0.008856451679035631; //(6/29)^3
        var k = 0.0011070564598794539; //(3/29)^3
        //get illuminant/observer
        i = i || 'D65';
        o = o || 2;
        xn = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$xyz$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].whitepoint[o][i][0];
        yn = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$xyz$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].whitepoint[o][i][1];
        zn = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$xyz$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].whitepoint[o][i][2];
        un = 4 * xn / (xn + 15 * yn + 3 * zn);
        vn = 9 * yn / (xn + 15 * yn + 3 * zn);
        // un = 0.19783000664283;
        // vn = 0.46831999493879;
        _u = u / (13 * l) + un || 0;
        _v = v / (13 * l) + vn || 0;
        y = l > 8 ? yn * Math.pow((l + 16) / 116, 3) : yn * l * k;
        //wikipedia method
        x = y * 9 * _u / (4 * _v) || 0;
        z = y * (12 - 3 * _u - 20 * _v) / (4 * _v) || 0;
        //boronine method
        //https://github.com/boronine/husl/blob/master/husl.coffee#L201
        // x = 0 - (9 * y * _u) / ((_u - 4) * _v - _u * _v);
        // z = (9 * y - (15 * _v * y) - (_v * x)) / (3 * _v);
        return [
            x,
            y,
            z
        ];
    }
};
const __TURBOPACK__default__export__ = luv;
// http://www.brucelindbloom.com/index.html?Equations.html
// https://github.com/boronine/husl/blob/master/husl.coffee
//i - illuminant
//o - observer
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$xyz$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].luv = function(arg, i, o) {
    var _u, _v, l, u, v, x, y, z, xn, yn, zn, un, vn;
    //get constants
    var e = 0.008856451679035631; //(6/29)^3
    var k = 903.2962962962961; //(29/3)^3
    //get illuminant/observer coords
    i = i || 'D65';
    o = o || 2;
    xn = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$xyz$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].whitepoint[o][i][0];
    yn = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$xyz$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].whitepoint[o][i][1];
    zn = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$xyz$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].whitepoint[o][i][2];
    un = 4 * xn / (xn + 15 * yn + 3 * zn);
    vn = 9 * yn / (xn + 15 * yn + 3 * zn);
    x = arg[0], y = arg[1], z = arg[2];
    _u = 4 * x / (x + 15 * y + 3 * z) || 0;
    _v = 9 * y / (x + 15 * y + 3 * z) || 0;
    var yr = y / yn;
    l = yr <= e ? k * yr : 116 * Math.pow(yr, 1 / 3) - 16;
    u = 13 * l * (_u - un);
    v = 13 * l * (_v - vn);
    return [
        l,
        u,
        v
    ];
};
}}),
"[project]/node_modules/color-space/lchuv.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
/**
 * Cylindrical CIE LUV
 *
 * @module color-space/lchuv
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$luv$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/color-space/luv.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$xyz$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/color-space/xyz.js [app-ssr] (ecmascript)");
;
;
// cylindrical luv
var lchuv = {
    name: 'lchuv',
    channel: [
        'lightness',
        'chroma',
        'hue'
    ],
    alias: [
        'LCHuv',
        'cielchuv'
    ],
    min: [
        0,
        0,
        0
    ],
    max: [
        100,
        100,
        360
    ],
    luv: function(luv) {
        var l = luv[0], c = luv[1], h = luv[2], u, v, hr;
        hr = h / 360 * 2 * Math.PI;
        u = c * Math.cos(hr);
        v = c * Math.sin(hr);
        return [
            l,
            u,
            v
        ];
    },
    xyz: function(arg) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$luv$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].xyz(lchuv.luv(arg));
    }
};
const __TURBOPACK__default__export__ = lchuv;
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$luv$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].lchuv = function(luv) {
    var l = luv[0], u = luv[1], v = luv[2];
    var c = Math.sqrt(u * u + v * v);
    var hr = Math.atan2(v, u);
    var h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
        h += 360;
    }
    return [
        l,
        c,
        h
    ];
};
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$xyz$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].lchuv = function(arg) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$luv$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].lchuv(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$xyz$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].luv(arg));
};
}}),
"[project]/node_modules/color-rgba/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
/** @module  color-rgba */ __turbopack_context__.s({
    "default": (()=>rgba)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$parse$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/color-parse/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$rgb$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/color-space/rgb.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$hsl$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/color-space/hsl.js [app-ssr] (ecmascript)");
;
;
;
function rgba(color) {
    // template literals
    if (Array.isArray(color) && color.raw) color = String.raw(...arguments);
    if (color instanceof Number) color = +color;
    var values, i, l;
    //attempt to parse non-array arguments
    var parsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$parse$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(color);
    if (!parsed.space) return [];
    const min = parsed.space[0] === 'h' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$hsl$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].min : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$rgb$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].min;
    const max = parsed.space[0] === 'h' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$hsl$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].max : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$rgb$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].max;
    values = Array(3);
    values[0] = Math.min(Math.max(parsed.values[0], min[0]), max[0]);
    values[1] = Math.min(Math.max(parsed.values[1], min[1]), max[1]);
    values[2] = Math.min(Math.max(parsed.values[2], min[2]), max[2]);
    if (parsed.space[0] === 'h') {
        values = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$color$2d$space$2f$hsl$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].rgb(values);
    }
    values.push(Math.min(Math.max(parsed.alpha, 0), 1));
    return values;
}
}}),

};

//# sourceMappingURL=node_modules_896bbad1._.js.map