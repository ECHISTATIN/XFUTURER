{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport * as acceptLanguage from 'accept-language-parser'\n\nconst locales = ['en', 'zh', 'ja'] as const\nconst defaultLocale = 'ja'\n\nfunction isMobile(userAgent: string): boolean {\n  const mobileRegex = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n  return mobileRegex.test(userAgent)\n}\n\nexport function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl\n\n  // 跳过静态资源请求\n  if (\n    pathname.startsWith('/images') || // 跳过 /images/*\n    pathname.startsWith('/_next') ||  // 跳过 Next.js 内部资源\n    pathname.startsWith('/api') ||    // 跳过 API 路由\n    pathname === '/favicon.ico'       // 跳过 favicon\n  ) {\n    return NextResponse.next() // 直接处理请求，不重定向\n  }\n\n  // 检查路径是否已包含语言标识\n  const pathnameHasLocale = locales.some(\n    (locale) => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`\n  )\n\n  if (pathnameHasLocale) return\n\n  // 获取用户首选语言\n  const acceptLang = request.headers.get('accept-language') || 'en'\n  const languages = acceptLanguage.parse(acceptLang)\n  const preferredLocale = languages[0]?.code\n  \n  // 选择匹配的语言或默认语言\n  const locale = locales.includes(preferredLocale as any) \n    ? preferredLocale \n    : defaultLocale\n\n  // 根据设备类型选择路径\n  const userAgent = request.headers.get('user-agent') || ''\n  const devicePath = isMobile(userAgent) ? '/mobile/top' : '/top'\n\n  // 重定向到对应的路径\n  request.nextUrl.pathname = `/${locale}${devicePath}`\n  return NextResponse.redirect(request.nextUrl)\n}\n\nexport const config = {\n  matcher: [\n    // 只匹配不以以下路径开头的请求\n    '/((?!images|_next/static|_next/image|api|favicon.ico).*)',\n  ],\n}"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEA,MAAM,UAAU;IAAC;IAAM;IAAM;CAAK;AAClC,MAAM,gBAAgB;AAEtB,SAAS,SAAS,SAAiB;IACjC,MAAM,cAAc;IACpB,OAAO,YAAY,IAAI,CAAC;AAC1B;AAEO,SAAS,WAAW,OAAoB;IAC7C,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,WAAW;IACX,IACE,SAAS,UAAU,CAAC,cAAc,eAAe;IACjD,SAAS,UAAU,CAAC,aAAc,kBAAkB;IACpD,SAAS,UAAU,CAAC,WAAc,YAAY;IAC9C,aAAa,eAAqB,aAAa;MAC/C;QACA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,GAAG,cAAc;;IAC3C;IAEA,gBAAgB;IAChB,MAAM,oBAAoB,QAAQ,IAAI,CACpC,CAAC,SAAW,SAAS,UAAU,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,KAAK,aAAa,CAAC,CAAC,EAAE,QAAQ;IAG7E,IAAI,mBAAmB;IAEvB,WAAW;IACX,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC,sBAAsB;IAC7D,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,QAAoB,AAAD,EAAE;IACvC,MAAM,kBAAkB,SAAS,CAAC,EAAE,EAAE;IAEtC,eAAe;IACf,MAAM,SAAS,QAAQ,QAAQ,CAAC,mBAC5B,kBACA;IAEJ,aAAa;IACb,MAAM,YAAY,QAAQ,OAAO,CAAC,GAAG,CAAC,iBAAiB;IACvD,MAAM,aAAa,SAAS,aAAa,gBAAgB;IAEzD,YAAY;IACZ,QAAQ,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE,SAAS,YAAY;IACpD,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,QAAQ,OAAO;AAC9C;AAEO,MAAM,SAAS;IACpB,SAAS;QACP,iBAAiB;QACjB;KACD;AACH"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}